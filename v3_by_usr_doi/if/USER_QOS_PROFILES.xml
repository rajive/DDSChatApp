<?xml version="1.0"?>
<!-- 
Description
XML QoS Profile for Chat

The QoS configuration of the DDS entities in the generated example is loaded 
from this file.

This file is used only when it is in the current working directory or when the
environment variable NDDS_QOS_PROFILES is defined and points to this file.

The profile in this file inherits from the builtin QoS profile 
BuiltinQosLib::Generic.StrictReliable. That profile, along with all of the 
other built-in QoS profiles can be found in the 
BuiltinProfiles.documentationONLY.xml file located in the 
$NDDSHOME/resource/qos_profiles_5.2.1.1/xml/ directory.

You may use any of these QoS configurations in your application simply by 
referring to them by the name shown in the 
BuiltinProfiles.documentationONLY.xml file and listed below: 

* In library "BuiltinQosLib":
** Baseline
** Baseline.5.0.0
** Baseline.5.1.0
** Generic.Common
** Generic.Monitoring.Common
** Generic.ConnextMicroCompatibility
** Generic.OtherDDSVendorCompatibility

* In library "BuiltinQosLibExp":
** Generic.StrictReliable
** Generic.KeepLastReliable
** Generic.BestEffort
** Generic.StrictReliable.HighThroughput
** Generic.StrictReliable.LowLatency
** Generic.Participant.LargeData
** Generic.Participant.LargeData.Monitoring
** Generic.StrictReliable.LargeData
** Generic.KeepLastReliable.LargeData
** Generic.StrictReliable.LargeData.FastFlow
** Generic.StrictReliable.LargeData.MediumFlow
** Generic.StrictReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.LargeData.FastFlow
** Generic.KeepLastReliable.LargeData.MediumFlow
** Generic.KeepLastReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.TransientLocal
** Generic.KeepLastReliable.Transient
** Generic.KeepLastReliable.Persistent
** Generic.AutoTuning
** Pattern.PeriodicData
** Pattern.Streaming
** Pattern.ReliableStreaming
** Pattern.Event
** Pattern.AlarmEvent
** Pattern.Status
** Pattern.AlarmStatus
** Pattern.LastValueCache

You should not edit the file BuiltinProfiles.documentationONLY.xml directly.
However, if you wish to modify any of the values in a built-in profile, the
recommendation is to create a profile of your own and inherit from the built-in
profile you wish to modify. The NDDS_QOS_PROFILES.example.xml file (contained in 
the same directory as the BuiltinProfiles.documentationONLY.xml file) shows how
to inherit from the built-in profiles. 

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="/Applications/rti_connext_dds-5.2.1/resource/schema/rti_dds_profiles.xsd"
     version="5.2.1.1">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="Chat_Library">

        <!-- QoS profile used to configure reliable communication between the DataWriter 
             and DataReader created in the example code.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="Chat_Profile" 
            		 base_name="BuiltinQosLibExp::Pattern.Status" 
            		 is_default_qos="true">
            <!-- QoS used to configure the data writer created in the example code -->                
            <datawriter_qos>
                <publication_name>
                    <name>ChatDataWriter</name>
                </publication_name>
                <ownership>
                    <kind>EXCLUSIVE_OWNERSHIP_QOS</kind>
                </ownership>
                <ownership_strength>
                    <value>10</value>
                </ownership_strength>
            </datawriter_qos>
            
            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>
                <subscription_name>
                    <name>ChatDataReader</name>
                </subscription_name>
				<ownership>
				    <kind>EXCLUSIVE_OWNERSHIP_QOS</kind>
				</ownership>
				<history>
				    <depth>
				        3
				    </depth>
				</history>
            </datareader_qos>
            
            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>Rajive</name>
                    <role_name>ChatParticipantRole</role_name>
                </participant_name>

            </participant_qos>
        </qos_profile>

    </qos_library>
    
    
    <!-- types -->
    <types>
        <include file="Chat.xml"/>
    </types>
    
    
    <!-- Domain Library -->
    <domain_library name="MyDomainLibrary" >

        <domain name="ChatDomain" domain_id="0">

            <!-- NOTE: The KIND environment variable is used to specify 
            	how the datatype is configured. Set the environment variable 
            	as follows, to select between the two available choices.
            	
                 1. User Generated datatypes - used for compiled code
            		    KIND=userGenerated
            	 
           		 2. Dynamic Data datatypes - used for scripting or compiled code
            			KIND=dynamicData
            			
            	Generally, we prefer to use "userGenerated" datatypes in 
            	compiled code, due to the ease of use in working with 
            	generated datatypes.
            -->
            <register_type kind="$(KIND)"
                		   name="My::ChatObject" 
                		   type_ref="My::ChatObject"/>                    
                		   
            <topic name="Chat" register_type_ref="My::ChatObject"/>
           
        </domain>                	
    </domain_library>

    <!-- Participant library -->
    <participant_library name="MyParticipantLibrary">

		<domain_participant name="MyPublicationParticipant"
							domain_ref="MyDomainLibrary::ChatDomain">
           
			<participant_qos base_name="Chat_Library::Chat_Profile">
			</participant_qos>
		 	
		 	<publisher name="MyPublisher">
		 		<publisher_qos>
		 	        <partition>
		 	            <name>
		 	                <element></element>
		 	                <element>starwars</element>
		 	                <element>startrek</element>
		 	                <element>funny</element>
		 	                <element>*</element>
		 	            </name>
		 	        </partition>
		 	    </publisher_qos>
		 		<data_writer name="ChatObjectWriter" topic_ref="Chat">
		 	  		<datawriter_qos base_name="Chat_Library::Chat_Profile">		 	  		    
		 	  		</datawriter_qos>
		 		</data_writer> 
		 	</publisher>
            
		</domain_participant>
		        
        
        <domain_participant name="MySubscriptionParticipant" 
		                    domain_ref="MyDomainLibrary::ChatDomain">
		
			<participant_qos base_name="Chat_Library::Chat_Profile">
			</participant_qos>
			
            <subscriber name="MySubscriber">
                <data_reader name="ChatObjectReader" topic_ref="Chat">
                     <filter name="Chat" kind="builtin.sql">
                        <expression>
                            user = %0 OR user = %1 OR user = %2
                        </expression>
                        <parameter_list>
                            <param>'Rajive'</param>
                            <param>'Nisha'</param>
                            <param>'Ravi'</param>
                        </parameter_list>
                    </filter>        
                    <datareader_qos base_name="Chat_Library::Chat_Profile"/> 
                </data_reader>
            </subscriber>
        </domain_participant>

    </participant_library>
</dds>
